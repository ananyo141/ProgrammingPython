#!/usr/bin/env python3
# Clean autogenerated bytecode files and __pycache__/ folders 
# in a given directory tree

import os, shutil

def cleanBytecodeFiles(directory: str, findonly:bool = False) -> (int, int):
    ''' Clean bytecode and __pycache__ autogenerated cache files
    by python and return the directories and files cleaned-count '''

    dirCleaned = fileCleaned = 0
    for dirname, subdirs, filenames in os.walk(directory):
        for subdir in subdirs:
            if subdir == '__pycache__':
                subdirpath = os.path.join(dirname, subdir)
                print(f"Found cache folder {repr(subdir)} in {repr(dirname)}")
                if not findonly:
                    shutil.rmtree(subdirpath)
                    subdirs.remove(subdir)      # so python doesn't walk into
                    dirCleaned += 1             # the removed directory

        for filename in filenames:
            if os.path.splitext(filename)[1] in ('.pyc', '.pyo'):
                filepath = os.path.join(dirname, filename)
                print(f"Found bytecode file {repr(filename)} in {repr(dirname)}")
                if not findonly:
                    os.unlink(filepath)
                    fileCleaned += 1

    return dirCleaned, fileCleaned

if __name__ == '__main__':
    import sys
    
    directory = os.curdir if len(sys.argv) == 1 else sys.argv[1]
    cleanBytecodeFiles(directory, findonly=True)

